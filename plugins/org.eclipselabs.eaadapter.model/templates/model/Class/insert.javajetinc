<% if (!genClass.isAbstract() && !isInterface &&
		!genClass.getName().equals("EARepository") && 
		genClass.getName().startsWith("EA"))
// Updating ea link only if not under version control!
{
	final String linkType;
	if (genClass.getName().equals("EAPackage"))
		linkType = "Package";
	else if (genClass.getName().equals("EAElement"))
		linkType = "Element";
	else if (genClass.getName().equals("EAMethod"))
		linkType = "Method";
	else if (genClass.getName().equals("EAAttribute"))
		linkType = "Attribute";
	else if (genClass.getName().equals("EAParameter"))
		linkType = "Parameter";
	else if (genClass.getName().equals("EADiagram"))
		linkType = "Diagram";
	else if (genClass.getName().equals("EADiagramLink"))
		linkType = "DiagramLink";
	else if (genClass.getName().equals("EADiagramObject"))
		linkType = "DiagramObject";
	else if (genClass.getName().equals("EAConnector"))
		linkType = "Connector";
	else if (genClass.getName().equals("EAConnectorEnd"))
		linkType = "ConnectorEnd";
	else if (genClass.getName().equals("EAConnectorTag"))
		linkType = "ConnectorTag";
	else if (genClass.getName().equals("EAAttributeTag"))
		linkType = "AttributeTag";
	else if (genClass.getName().equals("EAMethodTag"))
		linkType = "MethodTag";
	else if (genClass.getName().equals("EATaggedValue"))
		linkType = "TaggedValue";
	else linkType = "Object";
%>
	/**
	 * Update EA Link only if not under version control!
	 * @generated
	 */
	private boolean updateEaLink(<%=linkType%> eaLink) {
		final <%=genModel.getImportedName("org.eclipselabs.eaadapter.model.EAPackage")%> p = EAUtil.getContainerOfType(this, <%=genModel.getImportedName("org.eclipselabs.eaadapter.model.EamodelPackage")%>.Literals.EA_PACKAGE);
		if (p == null || p.getEaLink() == null || !p.getEaLink().GetIsVersionControlled()) {
			try {
				return eaLink.Update();
			} catch (Exception e) {
			}
		} else {
			// not possible if under version control
		}
		return false;
	}
	
<%}%>
<% if (genClass.getName().equals("EAConnector") && !isInterface)
{%>
	/**
	 * Checks if this object is under version control.
	 * @generated
	 */
	private boolean isUnderVersionControl() {
		final EAPackage p = EAUtil.getContainerOfType(this, EamodelPackage.Literals.EA_PACKAGE);
		if (p == null) {
			EAUtil.getLogger(getClass()).warn("Cannot get containing package! Is this element contained somewhere meaningful? " + this);
			return false;
		} else if (p.getEaLink() == null) {
			EAUtil.getLogger(getClass()).warn("Cannot get EA Link of containing package! " + p);
			return false;
		} else {
			return p.getEaLink().GetIsVersionControlled();
		}
	}

<%}%>
<% if (!genClass.isAbstract() && !isInterface && 
		!genClass.getName().equals("EARepository") &&
		!genClass.getName().equals("EADiagramLink") &&
		!genClass.getName().equals("EADiagramObject") &&
		!genClass.getName().equals("EAConnectorEnd") &&
		genClass.getName().startsWith("EA"))
// equals can only be overridden if the attribute guid exists 
{%>
	/**
	 * Calculate the hashcode over the global unique identifier (guid) of the ea object.
	 * @generated
	 */
	@Override
	public int hashCode() {
		String guid = getGuid();
		if (guid != null) {
			if (!guidHashMap.containsKey(guid)) {
				int hashCode = super.hashCode();
				guidHashMap.put(guid, hashCode);
				return hashCode;
			} else return guidHashMap.get(guid);
		} else return super.hashCode();
	}
	
	/**
	 * @generated
	 */
	transient private static <%=genModel.getImportedName("java.util.Map")%><String,Integer> guidHashMap = new <%=genModel.getImportedName("java.util.HashMap")%><String, Integer>(); 

	/**
	 * @generated
	 */
	@Override
	public boolean equals(Object obj) {
		return obj != null && hashCode() == obj.hashCode();
	}

<%}%>
<%if (genClass.getName().equals("EARepository")) {%>
  <%if (!isInterface) {%>
	/**
	 * A map of repositories, categorized by filenames.
	 * This ensures only one EA instance for each eap-file.
	 * 
	 * @generated
	 */
	transient private static <%=genModel.getImportedName("java.util.Map")%><String,<%=genModel.getImportedName("java.lang.ref.WeakReference")%><Repository>> repositories = new <%=genModel.getImportedName("java.util.HashMap")%><String,<%=genModel.getImportedName("java.lang.ref.WeakReference")%><Repository>>();

	/**
	 * If eaLink is not null but EA was closed for other reasons, eaLink points to an invalid place.
	 * So lets check the link.
	 * 
	 * @generated
	 */
	private boolean checkEaLink(String modelFile) {
		try {
			// check if we can access the repository
			if (eaLink.GetModels().iterator() == null) {
				// failed... lets remove it from the repository map
				repositories.remove(modelFile);
				eaLink = null;
			}
			eaLink.GetModels().iterator().hasNext();
			return true;
		} catch (Exception e) {
			// failed... lets remove it from the repository map
			repositories.remove(modelFile);
			eaLink = null;
			return false;
		}
	}
	
  <%}%>
<%}%>