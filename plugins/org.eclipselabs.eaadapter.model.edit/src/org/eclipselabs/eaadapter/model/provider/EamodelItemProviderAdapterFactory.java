/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipselabs.eaadapter.model.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipselabs.eaadapter.model.util.EamodelAdapterFactory;


/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EamodelItemProviderAdapterFactory extends EamodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAAttributeItemProvider eaAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAAttributeAdapter() {
		if (eaAttributeItemProvider == null) {
			eaAttributeItemProvider = new EAAttributeItemProvider(this);
		}

		return eaAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAAttributeTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAAttributeTagItemProvider eaAttributeTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAAttributeTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAAttributeTagAdapter() {
		if (eaAttributeTagItemProvider == null) {
			eaAttributeTagItemProvider = new EAAttributeTagItemProvider(this);
		}

		return eaAttributeTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAConnectorItemProvider eaConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAConnectorAdapter() {
		if (eaConnectorItemProvider == null) {
			eaConnectorItemProvider = new EAConnectorItemProvider(this);
		}

		return eaConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAConnectorEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAConnectorEndItemProvider eaConnectorEndItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAConnectorEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAConnectorEndAdapter() {
		if (eaConnectorEndItemProvider == null) {
			eaConnectorEndItemProvider = new EAConnectorEndItemProvider(this);
		}

		return eaConnectorEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAConnectorTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAConnectorTagItemProvider eaConnectorTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAConnectorTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAConnectorTagAdapter() {
		if (eaConnectorTagItemProvider == null) {
			eaConnectorTagItemProvider = new EAConnectorTagItemProvider(this);
		}

		return eaConnectorTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EADiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EADiagramItemProvider eaDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EADiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEADiagramAdapter() {
		if (eaDiagramItemProvider == null) {
			eaDiagramItemProvider = new EADiagramItemProvider(this);
		}

		return eaDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EADiagramLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EADiagramLinkItemProvider eaDiagramLinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EADiagramLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEADiagramLinkAdapter() {
		if (eaDiagramLinkItemProvider == null) {
			eaDiagramLinkItemProvider = new EADiagramLinkItemProvider(this);
		}

		return eaDiagramLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EADiagramObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EADiagramObjectItemProvider eaDiagramObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EADiagramObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEADiagramObjectAdapter() {
		if (eaDiagramObjectItemProvider == null) {
			eaDiagramObjectItemProvider = new EADiagramObjectItemProvider(this);
		}

		return eaDiagramObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAElementItemProvider eaElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAElementAdapter() {
		if (eaElementItemProvider == null) {
			eaElementItemProvider = new EAElementItemProvider(this);
		}

		return eaElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAMethodItemProvider eaMethodItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAMethodAdapter() {
		if (eaMethodItemProvider == null) {
			eaMethodItemProvider = new EAMethodItemProvider(this);
		}

		return eaMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAMethodTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAMethodTagItemProvider eaMethodTagItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAMethodTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAMethodTagAdapter() {
		if (eaMethodTagItemProvider == null) {
			eaMethodTagItemProvider = new EAMethodTagItemProvider(this);
		}

		return eaMethodTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAPackageItemProvider eaPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAPackageAdapter() {
		if (eaPackageItemProvider == null) {
			eaPackageItemProvider = new EAPackageItemProvider(this);
		}

		return eaPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EAParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAParameterItemProvider eaParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EAParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAParameterAdapter() {
		if (eaParameterItemProvider == null) {
			eaParameterItemProvider = new EAParameterItemProvider(this);
		}

		return eaParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EARepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EARepositoryItemProvider eaRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EARepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEARepositoryAdapter() {
		if (eaRepositoryItemProvider == null) {
			eaRepositoryItemProvider = new EARepositoryItemProvider(this);
		}

		return eaRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.EATaggedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EATaggedValueItemProvider eaTaggedValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.EATaggedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEATaggedValueAdapter() {
		if (eaTaggedValueItemProvider == null) {
			eaTaggedValueItemProvider = new EATaggedValueItemProvider(this);
		}

		return eaTaggedValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipselabs.eaadapter.model.Filter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterItemProvider filterItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipselabs.eaadapter.model.Filter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterAdapter() {
		if (filterItemProvider == null) {
			filterItemProvider = new FilterItemProvider(this);
		}

		return filterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (eaAttributeItemProvider != null) eaAttributeItemProvider.dispose();
		if (eaAttributeTagItemProvider != null) eaAttributeTagItemProvider.dispose();
		if (eaConnectorItemProvider != null) eaConnectorItemProvider.dispose();
		if (eaConnectorEndItemProvider != null) eaConnectorEndItemProvider.dispose();
		if (eaConnectorTagItemProvider != null) eaConnectorTagItemProvider.dispose();
		if (eaDiagramItemProvider != null) eaDiagramItemProvider.dispose();
		if (eaDiagramLinkItemProvider != null) eaDiagramLinkItemProvider.dispose();
		if (eaDiagramObjectItemProvider != null) eaDiagramObjectItemProvider.dispose();
		if (eaElementItemProvider != null) eaElementItemProvider.dispose();
		if (eaMethodItemProvider != null) eaMethodItemProvider.dispose();
		if (eaMethodTagItemProvider != null) eaMethodTagItemProvider.dispose();
		if (eaPackageItemProvider != null) eaPackageItemProvider.dispose();
		if (eaParameterItemProvider != null) eaParameterItemProvider.dispose();
		if (eaRepositoryItemProvider != null) eaRepositoryItemProvider.dispose();
		if (eaTaggedValueItemProvider != null) eaTaggedValueItemProvider.dispose();
		if (filterItemProvider != null) filterItemProvider.dispose();
	}

}
